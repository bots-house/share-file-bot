name: CI

on:
  push:
    paths-ignore:
      - CHANGELOG.md
  release:
    types: [published]

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-20.04
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
      go: ${{ steps.filter.outputs.go }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: ${{ github.ref }}
        filters: |
          docker:
            - Dockerfile
          go: 
            - '*.go'
            - 'go.*'
          
  lint-docker:
    name: Lint Docker
    runs-on: ubuntu-20.04
    needs: [changes]
    if: ${{ needs.changes.outputs.docker == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
          dockerfile: "Dockerfile"

  lint-go:
    name: Lint Go
    runs-on: ubuntu-20.04
    needs: [changes]
    if: ${{ needs.changes.outputs.go == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.31

  lint-go-security:
    name: Lint Go / CodeQL
    runs-on: ubuntu-20.04
    needs: [changes]
    if: ${{ needs.changes.outputs.go == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: go
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  test:
    name: Test
    runs-on: ubuntu-20.04
    needs: [changes]
    if: ${{ needs.changes.outputs.go == 'true' }}
    services:
      redis:
        image: redis:6
        ports:
          - 6379/tcp
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: sfb
          POSTGRES_PASSWORD: sfb
          POSTGRES_DB: sfb
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout 
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: "^1.15.3"

      - uses: actions/cache@v2.1.6
        name: Caching
        id: cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Try to build
        run: go build

      - name: Run tests
        env:
          SFB_DATABASE: postgres://sfb:sfb@localhost:${{ job.services.postgres.ports[5432] }}/sfb?sslmode=disable
          SFB_REDIS: redis://localhost:${{ job.services.redis.ports[6379] }}

        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload Coverage Result
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-20.04
    needs: [test, lint-docker, lint-go, lint-go-security]
    if: ${{ github.event_name == 'release' }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to docker.pkg.github.com
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Calculate build args
        run: |
          build_ref=$(git rev-parse --short "$GITHUB_SHA")
          echo "build_ref=$build_ref" >> $GITHUB_ENV

          build_version=${GITHUB_REF##*/}
          echo "build_version=$build_version" >> $GITHUB_ENV

          build_time=$(date --utc +%FT%TZ)
          echo "build_time=$build_time" >> $GITHUB_ENV

      - name: Build the Docker image
        run: |

          docker build \
            --build-arg BUILD_REF=$build_ref \
            --build-arg BUILD_VERSION=$build_version \
            --build-arg BUILD_TIME=$build_time \
            --tag docker.pkg.github.com/${{ github.repository }}/share-file-bot:latest \
            --tag docker.pkg.github.com/${{ github.repository }}/share-file-bot:$build_version \
            .

      - name: Push image to GitHub Packages
        run: |
          docker push docker.pkg.github.com/${{ github.repository }}/share-file-bot:latest
          docker push docker.pkg.github.com/${{ github.repository }}/share-file-bot:$build_version

      - name: Call Deploy Hooks
        run: |
          curl -X POST -i ${{ secrets.DEPLOY_HOOK }}
