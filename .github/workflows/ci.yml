name: CI

on:
  push:

jobs:
  lint-docker:
    name: Lint Docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
          dockerfile: "Dockerfile"

  lint-go:
    name: Lint Go
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.31

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:6
        ports:
          - 6379/tcp
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: sfb
          POSTGRES_PASSWORD: sfb
          POSTGRES_DB: sfb
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.15.3"

      - uses: actions/cache@v1
        name: Caching
        id: cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Try to build
        run: go build

      - name: Run tests
        env:
          SFB_DATABASE: postgres://sfb:sfb@localhost:${{ job.services.postgres.ports[5432] }}/sfb?sslmode=disable
          SFB_REDIS: redis://localhost:${{ job.services.redis.ports[6379] }}

        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload Coverage Result
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [build-and-test, lint-docker, lint-go]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2

      - name: Login to docker.pkg.github.com
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Get Revision
        run: |
          echo ::set-env name=REVISION::${GITHUB_REF##*/}-${GITHUB_SHA::7}-$(date +'%Y%m%d%H%M')

      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.8
        continue-on-error: true

      - name: Build the Docker image
        run: |
          docker build \
            --build-arg REVISION=${REVISION} \
            --tag docker.pkg.github.com/${{ github.repository }}/share-file-bot:latest \
            --tag docker.pkg.github.com/${{ github.repository }}/share-file-bot:${REVISION} \
            .

      - name: Push image to GitHub Packages
        run: |
          docker push docker.pkg.github.com/${{ github.repository }}/share-file-bot:latest
          docker push docker.pkg.github.com/${{ github.repository }}/share-file-bot:${REVISION}

      - name: Call Deploy Hooks
        run: |
          curl -X POST -i ${{ secrets.DEPLOY_HOOK }}
