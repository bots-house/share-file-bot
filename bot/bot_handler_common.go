package bot

import (
	"context"

	"github.com/bots-house/share-file-bot/core"
	"github.com/bots-house/share-file-bot/pkg/log"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/pkg/errors"
)

const (
	imageHowToUpload = "https://telegra.ph/file/2de4c3f11a14eeb0adcfb.png"
	textHelp         = "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–µ–ª–∏—Ç—Å—è –ª—é–±—ã–º *–¥–æ–∫—É–º–µ–Ω—Ç–æ–º* —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ñ–∞–π–ª, –∞ —è –≤ –æ—Ç–≤–µ—Ç –¥–∞–º —Ç–µ–±–µ —Å—Å—ã–ª–∫—É. –¢–∞–∫ –∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –Ω–µ –∑–∞–±—ã–ª –∫—Ç–æ –µ–º—É —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ—à–∞—Ä–∏–ª ü§ó"
	textStart        = "–ü—Ä–∏–≤–µ—Ç! üëã\n\n" + textHelp
	textNotDocument  = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å *–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏* (*—Ñ–∞–π–ª–∞–º–∏*). –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ üëá"
)

func (bot *Bot) onHelp(ctx context.Context, msg *tgbotapi.Message) error {
	answer := bot.newAnswerMsg(ctx, msg, textHelp)
	return bot.send(ctx, answer)
}

func (bot *Bot) onStart(ctx context.Context, msg *tgbotapi.Message) error {
	if args := msg.CommandArguments(); args != "" {
		user := getUserCtx(ctx)

		log.Debug(ctx, "query document", "public_id", args)
		result, err := bot.docSrv.GetDocumentByPublicID(ctx, user, args)
		if errors.Cause(err) == core.ErrDocumentNotFound {
			answer := bot.newAnswerMsg(ctx, msg, "üòê–ù–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –æ —Ç–∞–∫–æ–º —Ñ–∞–π–ª–µ, –ø—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É...")
			return bot.send(ctx, answer)
		} else if err != nil {
			return errors.Wrap(err, "download document")
		}

		switch {
		case result.OwnedDocument != nil:
			return bot.send(ctx, bot.renderOwnedDocument(msg, result.OwnedDocument))
		case result.Document != nil:
			return bot.send(ctx, bot.renderNotOwnedDocument(msg, result.Document))
		default:
			log.Error(ctx, "bad result")
		}
	}

	answer := bot.newAnswerMsg(ctx, msg, textStart)
	return bot.send(ctx, answer)
}

func (bot *Bot) onNotDocument(ctx context.Context, msg *tgbotapi.Message) error {
	txt := embeddWebPagePreview(textNotDocument, imageHowToUpload)
	answer := bot.newAnswerMsg(ctx, msg, txt)
	return bot.send(ctx, answer)
}
