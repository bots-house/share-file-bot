package bot

import (
	"context"

	"github.com/bots-house/share-file-bot/core"
	"github.com/bots-house/share-file-bot/pkg/log"
	"github.com/friendsofgo/errors"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

const (
	textHelp                = "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–µ–ª–∏—Ç—Å—è –ª—é–±—ã–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ) —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞. –û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –∞ —è –≤ –æ—Ç–≤–µ—Ç –¥–∞–º —Ç–µ–±–µ —Å—Å—ã–ª–∫—É. –¢–∞–∫ –∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å—å, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –Ω–µ –∑–∞–±—ã–ª –∫—Ç–æ –µ–º—É —ç—Ç–æ –ø–æ—à–∞—Ä–∏–ª ü§ó.\n\n /settings - –¥–ª—è –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
	textStart               = "–ü—Ä–∏–≤–µ—Ç! üëã\n\n" + textHelp
	textUnsupportedFileKind = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–æ–≤. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏. –û—Ç–ø—Ä–∞–≤—å –∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞, –∞ –≤ –æ—Ç–≤–µ—Ç —è –¥–∞–º —Ç–µ–±–µ —Å—Å—ã–ª–∫—É."
)

func (bot *Bot) onHelp(ctx context.Context, msg *tgbotapi.Message) error {
	answer := bot.newAnswerMsg(msg, textHelp)
	return bot.send(ctx, answer)
}

func (bot *Bot) onStart(ctx context.Context, msg *tgbotapi.Message) error {
	if args := msg.CommandArguments(); args != "" {
		user := getUserCtx(ctx)

		log.Debug(ctx, "query file", "public_id", args)
		result, err := bot.fileSrv.GetFileByPublicID(ctx, user, args)
		if errors.Cause(err) == core.ErrFileNotFound {
			answer := bot.newAnswerMsg(msg, "üòê–ù–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –æ —Ç–∞–∫–æ–º —Ñ–∞–π–ª–µ, –ø—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É...")
			return bot.send(ctx, answer)
		} else if err != nil {
			return errors.Wrap(err, "download file")
		}

		switch {
		case result.OwnedFile != nil:
			return bot.send(ctx, bot.renderOwnedFile(msg, result.OwnedFile))
		case result.File != nil:
			return bot.send(ctx, bot.renderNotOwnedFile(msg, result.File))
		default:
			log.Error(ctx, "bad result")
		}
	}

	answer := bot.newAnswerMsg(msg, textStart)
	return bot.send(ctx, answer)
}

func (bot *Bot) onUnsupportedFileKind(ctx context.Context, msg *tgbotapi.Message) error {
	answer := bot.newReplyMsg(msg, textUnsupportedFileKind)
	return bot.send(ctx, answer)
}

func (bot *Bot) onVersion(ctx context.Context, msg *tgbotapi.Message) error {
	answer := bot.newReplyMsg(msg, "`"+bot.revision+"`")
	return bot.send(ctx, answer)
}
