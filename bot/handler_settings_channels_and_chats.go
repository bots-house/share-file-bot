package bot

import (
	"context"
	"fmt"

	"github.com/bots-house/share-file-bot/bot/state"
	"github.com/bots-house/share-file-bot/pkg/tg"
	"github.com/bots-house/share-file-bot/service"
	"github.com/friendsofgo/errors"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/lithammer/dedent"
)

var (
	textSettingsChannelsAndChats = dedent.Dedent(`
		‚öôÔ∏è __*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*__ / üì¢ __*–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã*__
		
		–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏\. 
		–≠—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–≤–µ–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞\.
	`)

	textSettingsChannelsAndChatsConnect = dedent.Dedent(`
		‚öôÔ∏è __*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*__ / üì¢ __*–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã*__ / __*–ü–æ–¥–∫–ª—é—á–∏—Ç—å*__

		–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:

		1\. –î–æ–±–∞–≤—å—Ç–µ @%s –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ \(–Ω–∞–ø—Ä–∏–º–µ—Ä "Add User"\)\.
		2\. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ @username –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç, —Ç–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\.
	`)

	textSettingsChannelsAndChatsConnectForwardNotFromChannel = "‚ö†Ô∏è –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞, –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–µ @username –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É"
	textSettingsChannelsAndChatsConnectNotJoinLink           = "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç—å –∫–∞–∫-—Ç–æ —Ç–∞–∫: `t.me/joinchat/...`"
	textSettingsChannelsAndChatsConnectNotValid              = "‚ö†Ô∏è –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ @username, –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"
	textSettingsChannelsAndChatsConnectIsPrivate             = "‚ö†Ô∏è –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å @username –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç, —Ç—ã —Å–∫–∏–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :)"
	textSettingsChannelsAndChatsConnectNotFound              = "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –¥–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—Ä–æ—Å"
	textSettingsChannelsAndChatsConnectBotIsNotAdmin         = "‚ö†Ô∏è –ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"
	textSettingsChannelsAndChatsConnectUserIsNotAdmin        = "‚ö†Ô∏è –¢—ã –Ω–µ —è–≤–ª—è–µ—à—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ / –∫–∞–Ω–∞–ª–∞"

	textSettingsChannelsAndChatsConnectNotValidButtonCancel = "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª"
	textSettingsChannelsAndChatsButtonConnect               = "+ –ü–æ–¥–∫–ª—é—á–∏—Ç—å"
	callbackSettingsChannelsAndChatsConnect                 = "settings:channels-and-chats:connect"
)

func (bot *Bot) newSettingsChannelsAndChatsMessageEdit(ctx context.Context, chatID int64, msgID int) tgbotapi.EditMessageTextConfig {
	answ := tgbotapi.NewEditMessageText(chatID, msgID, textSettingsChannelsAndChats)

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				textSettingsChannelsAndChatsButtonConnect,
				callbackSettingsChannelsAndChatsConnect,
			),
			tgbotapi.NewInlineKeyboardButtonData(
				textCommonBack,
				callbackSettings,
			),
		),
	)

	answ.ReplyMarkup = &markup
	answ.ParseMode = "MarkdownV2"

	return answ
}

func (bot *Bot) onSettingsChannelsAndChats(ctx context.Context, cbq *tgbotapi.CallbackQuery) error {
	user := getUserCtx(ctx).ID

	go bot.answerCallbackQuery(ctx, cbq, "")

	if err := bot.state.Del(ctx, user); err != nil {
		return errors.Wrap(err, "delete state")
	}

	edit := bot.newSettingsChannelsAndChatsMessageEdit(ctx, cbq.Message.Chat.ID, cbq.Message.MessageID)
	return bot.send(ctx, edit)
}

func (bot *Bot) newSettingsChannelsAndChatsConnectEdit(ctx context.Context, cid int64, mid int) tgbotapi.EditMessageTextConfig {
	text := fmt.Sprintf(textSettingsChannelsAndChatsConnect, escapeMarkdown(bot.client.Self.UserName))
	answ := tgbotapi.NewEditMessageText(cid, mid, text)

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				textCommonBack,
				callbackSettingsChannelsAndChats,
			),
		),
	)

	answ.ReplyMarkup = &markup
	answ.ParseMode = "MarkdownV2"

	return answ
}

func (bot *Bot) onSettingsChannelsAndChatsConnect(ctx context.Context, cbq *tgbotapi.CallbackQuery) error {
	go bot.answerCallbackQuery(ctx, cbq, "")
	user := getUserCtx(ctx)

	if err := bot.state.Set(ctx, user.ID, state.SettingsChannelsAndChatsConnect); err != nil {
		return errors.Wrap(err, "can't set state of user")
	}

	edit := bot.newSettingsChannelsAndChatsConnectEdit(ctx, cbq.Message.Chat.ID, cbq.Message.MessageID)
	return bot.send(ctx, edit)
}

func (bot *Bot) onSettingsChannelsAndChatsConnectState(ctx context.Context, msg *tgbotapi.Message) error {

	var identity service.ChatIdentity

	switch {
	// handle forward
	case msg.ForwardDate != 0:
		if msg.ForwardFromChat == nil {
			reply := bot.newReplyMsg(msg, textSettingsChannelsAndChatsConnectForwardNotFromChannel)
			return bot.send(ctx, reply)
		}

		identity = service.NewChatIdentityFromID(msg.ForwardFromChat.ID)

	// handle @username
	case msg.Entities != nil && getFirstMentionEntity(*msg.Entities) != nil:
		entity := getFirstMentionEntity(*msg.Entities)
		username := msg.Text[entity.Offset:entity.Length]

		identity = service.NewChatIdentityFromUsername(username)

	// handle join link
	case msg.Entities != nil && getFirstLinkEntity(*msg.Entities) != nil:
		entity := getFirstLinkEntity(*msg.Entities)
		url := string([]rune(msg.Text)[entity.Offset:entity.Length])

		encodedPayload := tg.ParseJoinLink(url)

		if encodedPayload == "" {
			reply := bot.newReplyMsg(msg, textSettingsChannelsAndChatsConnectNotJoinLink)
			return bot.send(ctx, reply)
		}

		payload, err := tg.DecodeJoinLinkPayload(encodedPayload)
		if err != nil {
			return errors.Wrap(err, "decode join link payload")
		}

		identity.ID = payload.BotChatID()

	// unknown input
	default:
		answ := bot.newAnswerMsg(msg, textSettingsChannelsAndChatsConnectNotValid)
		answ.ParseMode = "MarkdownV2"
		answ.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					textSettingsChannelsAndChatsConnectNotValidButtonCancel,
					callbackSettingsChannelsAndChats,
				),
			),
		)
		return bot.send(ctx, answ)
	}

	user := getUserCtx(ctx)

	_, err := bot.chatSrv.Add(ctx, user, identity)

	switch {
	case err == service.ErrChatIsUser:
		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectIsPrivate)
	case err == service.ErrChatNotFoundOrBotIsNotAdmin:
		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectNotFound)
	case err == service.ErrBotIsNotChatAdmin:
		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectBotIsNotAdmin)
	case err == service.ErrUserIsNotChatAdmin:
		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectUserIsNotAdmin)
	case err != nil:
		return errors.Wrap(err, "add chat")
	}

	return nil
}
