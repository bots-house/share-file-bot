package bot

import (
	"context"
	"fmt"
	"strings"

	"github.com/bots-house/share-file-bot/bot/state"
	"github.com/bots-house/share-file-bot/core"
	"github.com/bots-house/share-file-bot/pkg/tg"
	"github.com/bots-house/share-file-bot/service"
	tgbotapi "github.com/bots-house/telegram-bot-api"
	"github.com/friendsofgo/errors"
	"github.com/lithammer/dedent"
)

func join(vs ...string) string {
	return strings.Join(vs, "\n")
}

var (
	textSettingsChannelsAndChats = dedent.Dedent(`
		‚öôÔ∏è __*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*__ / üì¢ __*–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã*__
		
		–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏\. 
		–≠—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–≤–µ–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞\.
	`)

	textSettingsChannelsAndChatsConnect = dedent.Dedent(`
		‚öôÔ∏è __*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*__ / üì¢ __*–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã*__ / __*–ü–æ–¥–∫–ª—é—á–∏—Ç—å*__

		–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:

		1\. –î–æ–±–∞–≤—å—Ç–µ @%s –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞ —Å –ø—Ä–∞–≤–∞–º–∏ ¬´–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤¬ª \(Add User\)\.
		2\. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ @username –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç, —Ç–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\.
	`)

	textSettingsChannelsAndChatsDetails = join(
		"‚öôÔ∏è __*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*__ / üì¢ __*–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã*__ / __*%s*__",
		"",
		"*ID:* `%d`",
		"*–¢–∏–ø:* `%s`",
		"",
		"üìà __–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞__",
		"",
		"*–§–∞–π–ª–æ–≤:* `%d`",
		"*–ó–∞–≥—Ä—É–∑–æ–∫ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:* `%d`",
		"*–ó–∞–≥—Ä—É–∑–æ–∫ —Å –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π*: `%d`",
	)

	textSettingsChannelsAndChatsDelete = dedent.Dedent(`
		‚öôÔ∏è __*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*__ / üì¢ __*–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã*__ / __*%s*__

		–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–∑—è—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É? 
		–§–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É, —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –Ω–µ–µ\.
		–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å\. 
	`)

	textSettingsChannelsAndChatsConnectNotValid             = "‚ö†Ô∏è –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ @username, –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"
	textSettingsChannelsAndChatsConnectIsPrivate            = "‚ö†Ô∏è –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å @username –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç, —Ç—ã —Å–∫–∏–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :)"
	textSettingsChannelsAndChatsConnectNotFound             = "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –¥–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—Ä–æ—Å"
	textSettingsChannelsAndChatsConnectBotIsNotAdmin        = "‚ö†Ô∏è –ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –ø—Ä–∞–≤–∞–º–∏ ¬´–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤¬ª (Add User)"
	textSettingsChannelsAndChatsConnectUserIsNotAdmin       = "‚ö†Ô∏è –¢—ã –Ω–µ —è–≤–ª—è–µ—à—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ / –∫–∞–Ω–∞–ª–∞"
	textSettingsChannelsAndChatsConnectBotIsNotEnoughRights = "‚ö†Ô∏è –ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ / –∫–∞–Ω–∞–ª–∞, –Ω–æ –µ–º—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ ¬´–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤¬ª (Add User)"
	textSettingsChannelsAndChatsConnectChatAlreadyConnected = "üëå –ö–∞–Ω–∞–ª / —á–∞—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"

	textSettingsChannelsAndChatsConnectNotValidButtonCancel = "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª"
	textSettingsChannelsAndChatsButtonConnect               = "+ –ü–æ–¥–∫–ª—é—á–∏—Ç—å"

	callbackSettingsChannelsAndChats              = "settings:channels-and-chats"
	callbackSettingsChannelsAndChatsConnect       = "settings:channels-and-chats:connect"
	callbackSettingsChannelsAndChatsDetails       = "settings:channels-and-chats:%d"
	callbackSettingsChannelsAndChatsDelete        = "settings:channels-and-chats:%d:delete"
	callbackSettingsChannelsAndChatsDeleteConfirm = "settings:channels-and-chats:%d:delete:confirm"
)

func (bot *Bot) newSettingsChannelsAndChatsMessageEdit(
	chatID int64,
	msgID int,
	chats []*core.Chat,
) tgbotapi.EditMessageTextConfig {
	answ := tgbotapi.NewEditMessageText(chatID, msgID, textSettingsChannelsAndChats)

	chatRows := make([][]tgbotapi.InlineKeyboardButton, len(chats))

	for i, chat := range chats {
		cbData := fmt.Sprintf(callbackSettingsChannelsAndChatsDetails, chat.ID)
		chatRows[i] = tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(chat.Title, cbData),
		)
	}

	chatRows = append(chatRows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			textCommonBack,
			callbackSettings,
		),
		tgbotapi.NewInlineKeyboardButtonData(
			textSettingsChannelsAndChatsButtonConnect,
			callbackSettingsChannelsAndChatsConnect,
		),
	))

	markup := tgbotapi.NewInlineKeyboardMarkup(
		chatRows...,
	)

	answ.ReplyMarkup = &markup
	answ.ParseMode = mdv2

	return answ
}

func (bot *Bot) onSettingsChannelsAndChats(ctx context.Context, cbq *tgbotapi.CallbackQuery) error {
	user := getUserCtx(ctx)

	go func() {
		_ = bot.answerCallbackQuery(ctx, cbq, "")
	}()

	if err := bot.state.Del(ctx, user.ID); err != nil {
		return errors.Wrap(err, "delete state")
	}

	chats, err := bot.chatSrv.GetChats(ctx, user)
	if err != nil {
		return errors.Wrap(err, "get chats")
	}

	edit := bot.newSettingsChannelsAndChatsMessageEdit(cbq.Message.Chat.ID, cbq.Message.MessageID, chats)
	return bot.send(ctx, edit)
}

func (bot *Bot) newSettingsChannelsAndChatsConnectEdit(cid int64, mid int) tgbotapi.EditMessageTextConfig {
	text := fmt.Sprintf(textSettingsChannelsAndChatsConnect, tg.EscapeMD(bot.client.Self.UserName))
	answ := tgbotapi.NewEditMessageText(cid, mid, text)

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				textCommonBack,
				callbackSettingsChannelsAndChats,
			),
		),
	)

	answ.ReplyMarkup = &markup
	answ.ParseMode = mdv2

	return answ
}

func (bot *Bot) onSettingsChannelsAndChatsConnect(ctx context.Context, cbq *tgbotapi.CallbackQuery) error {
	go func() {
		_ = bot.answerCallbackQuery(ctx, cbq, "")
	}()

	user := getUserCtx(ctx)

	if err := bot.state.Set(ctx, user.ID, state.SettingsChannelsAndChatsConnect); err != nil {
		return errors.Wrap(err, "can't set state of user")
	}

	edit := bot.newSettingsChannelsAndChatsConnectEdit(cbq.Message.Chat.ID, cbq.Message.MessageID)
	return bot.send(ctx, edit)
}

func getChatTypeRussian(typ core.ChatType) string {
	switch typ {
	case core.ChatTypeChannel:
		return "–∫–∞–Ω–∞–ª"
	case core.ChatTypeSuperGroup:
		return "—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
	case core.ChatTypeGroup:
		return "–≥—Ä—É–ø–ø–∞"
	default:
		return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}

func (bot *Bot) newSettingsChannelsAndChatsDetailsEdit(
	cid int64, mid int,
	chat *service.FullChat,
) *tgbotapi.EditMessageTextConfig {
	stats := chat.GetStats()

	text := fmt.Sprintf(
		textSettingsChannelsAndChatsDetails,
		tg.EscapeMD(chat.Title),
		chat.TelegramID,
		getChatTypeRussian(chat.Type),
		chat.Files,
		stats.WithSubscription,
		stats.NewSubscription,
	)

	answ := tgbotapi.NewEditMessageText(cid, mid, text)

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				textCommonBack,
				callbackSettingsChannelsAndChats,
			),
			tgbotapi.NewInlineKeyboardButtonData(
				textCommonDisconnect,
				fmt.Sprintf(callbackSettingsChannelsAndChatsDelete, chat.ID),
			),
		),
	)

	answ.ReplyMarkup = &markup
	answ.ParseMode = mdv2

	return &answ
}

func (bot *Bot) onSettingsChannelsAndChatsDeleteConfirm(
	ctx context.Context,
	user *core.User,
	cbq *tgbotapi.CallbackQuery,
	id core.ChatID,
) error {
	chat, err := bot.chatSrv.GetChat(ctx, user, id)
	if err != nil {
		return errors.Wrap(err, "Chat.GetChat")
	}

	if err := bot.chatSrv.DisconnectChat(ctx, user, chat.ID, false); err != nil {
		return errors.Wrap(err, "service disconnect chat")
	}

	go func() {
		_ = bot.answerCallbackQuery(ctx, cbq, "–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
	}()

	chats, err := bot.chatSrv.GetChats(ctx, user)
	if err != nil {
		return errors.Wrap(err, "service get chats")
	}

	edit := bot.newSettingsChannelsAndChatsMessageEdit(cbq.Message.Chat.ID, cbq.Message.MessageID, chats)

	return bot.send(ctx, edit)
}

func (bot *Bot) onSettingsChannelsAndChatsDelete(
	ctx context.Context,
	user *core.User,
	cbq *tgbotapi.CallbackQuery,
	id core.ChatID,
) error {
	chat, err := bot.chatSrv.GetChat(ctx, user, id)
	if err != nil {
		return errors.Wrap(err, "Chat.GetChat")
	}

	return bot.send(ctx, bot.newSettingsChannelsAndChatsDeleteEdit(
		cbq.Message.Chat.ID,
		cbq.Message.MessageID,
		chat,
	))
}

func (bot *Bot) newSettingsChannelsAndChatsDeleteEdit(
	cid int64,
	mid int,
	chat *service.FullChat,
) tgbotapi.EditMessageTextConfig {
	text := fmt.Sprintf(textSettingsChannelsAndChatsDelete, tg.EscapeMD(chat.Title))
	answ := tgbotapi.NewEditMessageText(
		cid,
		mid,
		text,
	)

	replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				textCommonBack,
				fmt.Sprintf(callbackSettingsChannelsAndChatsDetails, chat.ID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				textCommonYesIamSure,
				fmt.Sprintf(callbackSettingsChannelsAndChatsDeleteConfirm, chat.ID),
			),
		),
	)

	answ.ParseMode = mdv2

	answ.ReplyMarkup = &replyMarkup

	return answ
}

func (bot *Bot) onSettingsChannelsAndChatsDetails(
	ctx context.Context,
	user *core.User,
	cbq *tgbotapi.CallbackQuery,
	id core.ChatID,
) error {
	chat, err := bot.chatSrv.GetChat(ctx, user, id)
	if err != nil {
		return errors.Wrap(err, "Chat.GetChat")
	}

	edit := bot.newSettingsChannelsAndChatsDetailsEdit(
		cbq.Message.Chat.ID,
		cbq.Message.MessageID,
		chat,
	)

	return bot.send(ctx, edit)
}

func (bot *Bot) onSettingsChannelsAndChatsConnectState(ctx context.Context, msg *tgbotapi.Message) error {
	var identity service.ChatIdentity

	user := getUserCtx(ctx)

	switch {
	// handle forward
	case msg.ForwardDate != 0:
		if msg.ForwardFromChat == nil {
			return bot.sendText(
				ctx,
				user.ID,
				"‚ö†Ô∏è –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞, –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–µ @username –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É",
			)

		}

		identity = service.NewChatIdentityFromID(msg.ForwardFromChat.ID)

	// handle username and join link
	case msg.Text != "":
		query := strings.TrimSpace(msg.Text)
		typ, val := tg.ParseChatInput(query)

		switch typ {
		case tg.ChatInputUsername:
			identity = service.NewChatIdentityFromUsername(val)
		case tg.ChatInputJoinLink:
			payload, err := tg.DecodeJoinLinkPayload(val)
			if err != nil {
				return bot.sendText(ctx, user.ID, "‚ö†Ô∏è –ù–µ –º–æ–≥—É –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞")
			}

			identity = service.NewChatIdentityFromID(payload.BotChatID())
		default:
			return bot.sendText(ctx, user.ID, "‚ö†Ô∏è –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞ / —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã, —Ç–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–∞")
		}
	// unknown input
	default:
		answ := bot.newAnswerMsg(msg, textSettingsChannelsAndChatsConnectNotValid)
		answ.ParseMode = mdv2
		answ.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					textSettingsChannelsAndChatsConnectNotValidButtonCancel,
					callbackSettingsChannelsAndChats,
				),
			),
		)
		return bot.send(ctx, answ)
	}

	_, err := bot.chatSrv.Add(ctx, user, identity)

	switch {
	case err == service.ErrChatIsUser:
		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectIsPrivate)
	case err == service.ErrChatNotFoundOrBotIsNotAdmin:
		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectNotFound)
	case err == service.ErrBotIsNotChatAdmin:
		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectBotIsNotAdmin)
	case err == service.ErrBotNotEnoughRights:
		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectBotIsNotEnoughRights)
	case err == service.ErrUserIsNotChatAdmin:
		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectUserIsNotAdmin)
	case err == service.ErrChatAlreadyConnected:
		if err := bot.state.Set(ctx, user.ID, state.Empty); err != nil {
			return errors.Wrap(err, "update state")
		}

		return bot.sendText(ctx, user.ID, textSettingsChannelsAndChatsConnectChatAlreadyConnected)
	case err != nil:
		return errors.Wrap(err, "add chat")
	}

	out := tgbotapi.NewMessage(
		msg.Chat.ID,
		fmt.Sprintln("–ö–∞–Ω–∞–ª / —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."),
	)

	out.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(textCommonBack, callbackSettingsChannelsAndChats),
		),
	)

	if err := bot.state.Set(ctx, user.ID, state.Empty); err != nil {
		return errors.Wrap(err, "update state")
	}

	return bot.send(ctx, out)
}
