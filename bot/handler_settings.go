package bot

import (
	"context"

	"github.com/friendsofgo/errors"

	"github.com/bots-house/share-file-bot/core"
	"github.com/bots-house/share-file-bot/pkg/log"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/lithammer/dedent"
)

var (
	textSettings = dedent.Dedent(`
        ‚öôÔ∏è __*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*__

		‚Ä¢ _–î–ª–∏–Ω–Ω—ã–µ ID_ ‚Äî –±–æ—Ç –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ –¥–ª–∏–Ω–µ —Å—Å—ã–ª–∫–∏, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\. –î–ª–∏–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –±—É–¥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\.

		‚Ä¢ _–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã_ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —á–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫ –±–æ—Ç—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤\.
    `)

	textCommonBack       = "¬´ –ù–∞–∑–∞–¥"
	textCommonDisconnect = "–û—Ç–∫–ª—é—á–∏—Ç—å"
	textCommonYesIamSure = "–î–∞, —è —É–≤–µ—Ä–µ–Ω"

	textSettingsButtonLongIDs              = "–î–ª–∏–Ω–Ω—ã–µ ID"
	textSettingsButtonLongIDsEnabledAlert  = "–ì–µ–Ω–µ—Ä–∏–∞—Ü–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤–∫–ª—é—á–µ–Ω–∞"
	textSettingsButtonLongIDsDisabledAlert = "–ì–µ–Ω–µ—Ä–∏–∞—Ü–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω–∞"

	textSettingsButtonChannelsAndChats = "üì¢ –ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã"

	callbackSettings        = "settings"
	callbackSettingsLongIDs = "settings:toggle-long-ids"
)

func addIsEnabledEmoji(v bool, text string) string {
	if v {
		return "‚úÖ " + text
	}

	return text
}

func (bot *Bot) newSettingsMenuMessageReplyMarkup(longIDs bool) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				addIsEnabledEmoji(longIDs, textSettingsButtonLongIDs),
				callbackSettingsLongIDs,
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				textSettingsButtonChannelsAndChats,
				callbackSettingsChannelsAndChats,
			),
		),
	)
}

func (bot *Bot) newSettingsMenuMessage(msg *tgbotapi.Message, user *core.User) *tgbotapi.MessageConfig {
	answ := bot.newAnswerMsg(msg, textSettings)
	answ.ReplyMarkup = bot.newSettingsMenuMessageReplyMarkup(user.Settings.LongIDs)
	answ.ParseMode = "MarkdownV2"

	return answ
}

func (bot *Bot) newSettingsMenuMessageEdit(msg *tgbotapi.Message, user *core.User) tgbotapi.EditMessageTextConfig {
	answ := tgbotapi.NewEditMessageText(msg.Chat.ID, msg.MessageID, textSettings)

	markup := bot.newSettingsMenuMessageReplyMarkup(user.Settings.LongIDs)

	answ.ReplyMarkup = &markup
	answ.ParseMode = "MarkdownV2"

	return answ
}

func (bot *Bot) onSettingsToggleLongIDsCBQ(ctx context.Context, cbq *tgbotapi.CallbackQuery) error {
	user := getUserCtx(ctx)

	isEnabled, err := bot.authSrv.SettingsToggleLongIDs(ctx, user)
	if err != nil {
		return errors.Wrap(err, "toggle settings long ids")
	}

	var answer string

	if isEnabled {
		answer = textSettingsButtonLongIDsEnabledAlert
	} else {
		answer = textSettingsButtonLongIDsDisabledAlert
	}

	go func() {
		if err := bot.answerCallbackQuery(ctx, cbq, answer); err != nil {
			log.Warn(ctx, "cant answer inline query in onSettingsToggleLongIDsCBQ", "err", err)
		}
	}()

	answ := bot.newSettingsMenuMessageEdit(cbq.Message, user)
	return bot.send(ctx, answ)
}

func (bot *Bot) onSettings(ctx context.Context, msg *tgbotapi.Message) error {
	user := getUserCtx(ctx)

	answ := bot.newSettingsMenuMessage(msg, user)

	return bot.send(ctx, answ)
}

func (bot *Bot) onSettingsCallbackQuery(ctx context.Context, cbq *tgbotapi.CallbackQuery) error {

	user := getUserCtx(ctx)
	answ := bot.newSettingsMenuMessageEdit(cbq.Message, user)
	return bot.send(ctx, answ)
}
