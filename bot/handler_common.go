package bot

import (
	"context"
	"fmt"
	"strings"

	"github.com/bots-house/share-file-bot/bot/state"
	"github.com/bots-house/share-file-bot/core"
	"github.com/bots-house/share-file-bot/pkg/log"
	"github.com/bots-house/share-file-bot/pkg/tg"
	"github.com/bots-house/share-file-bot/service"
	tgbotapi "github.com/bots-house/telegram-bot-api"
	"github.com/friendsofgo/errors"
	"github.com/lithammer/dedent"
)

const (
	textUnsupportedFileKind = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–æ–≤\\. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏\\. –û—Ç–ø—Ä–∞–≤—å –∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞, –∞ –≤ –æ—Ç–≤–µ—Ç —è –¥–∞–º —Ç–µ–±–µ —Å—Å—ã–ª–∫—É\\."
	mdv2                    = "MarkdownV2"
)

var (
	textHello = "–ü—Ä–∏–≤–µ—Ç\\! üëã\n"

	textHelp = dedent.Dedent(`
		–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ª—é–±—ã–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º \(—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ\) —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞\. 
		–û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–π –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –∞ —è –≤ –æ—Ç–≤–µ—Ç –¥–∞–º —Ç–µ–±–µ —Å—Å—ã–ª–∫—É\. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å—å, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –Ω–µ –∑–∞–±—ã–ª –∫—Ç–æ –µ–º—É —ç—Ç–æ –ø–æ—à–∞—Ä–∏–ª\.
		–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º\. 

		/settings \- –¥–ª—è –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

		–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @share\_file\_support
		–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: @share\_file\_news
	`)

	textStart = textHello + textHelp
)

func (bot *Bot) getTextStart() string {
	if bot.textHelp != "" {
		return textHello + bot.textHelp
	}

	return textStart
}

func (bot *Bot) getTextHelp() string {
	if bot.textHelp != "" {
		return bot.textHelp
	}

	return textHelp
}

func (bot *Bot) onHelp(ctx context.Context, msg *tgbotapi.Message) error {
	answer := bot.newAnswerMsg(msg, bot.getTextHelp())
	answer.ParseMode = mdv2
	return bot.send(ctx, answer)
}

func (bot *Bot) onStart(ctx context.Context, msg *tgbotapi.Message) error {
	user := getUserCtx(ctx)

	// reset state
	if err := bot.state.Set(ctx, user.ID, state.Empty); err != nil {
		return errors.Wrap(err, "update state")
	}

	if args := msg.CommandArguments(); args != "" {
		log.Debug(ctx, "query file", "public_id", args)
		result, err := bot.fileSrv.GetFileByPublicID(ctx, user, args)

		switch {
		case errors.Is(err, core.ErrFileNotFound):
			answer := bot.newAnswerMsg(msg, "üòê –ù–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –æ —Ç–∞–∫–æ–º —Ñ–∞–π–ª–µ, –ø—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É...")
			return bot.send(ctx, answer)
		case errors.Is(err, service.ErrFileViolatesCopyright):
			answer := bot.newAnswerMsg(msg, "üòê –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞ –æ—Ç –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π –∏ –º—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å.")
			return bot.send(ctx, answer)
		case errors.Is(err, service.ErrCantCheckMembership):
			//nolint:stylecheck
			answer := bot.newAnswerMsg(msg, "üôÖ‚Äç‚ôÇÔ∏è‚Äç –Ø –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å —Ç–µ–±–µ —Ñ–∞–π–ª, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞, —Å–≤—è–∂–∏—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π –æ—Ç –º–µ–Ω—è –ø—Ä–∏–≤–µ—Ç!")
			return bot.send(ctx, answer)
		case err != nil:
			return errors.Wrap(err, "download file")
		}

		switch {
		case result.OwnedFile != nil:
			return bot.send(ctx, bot.renderOwnedFile(msg, result.OwnedFile))
		case result.File != nil:
			return bot.send(ctx, bot.renderNotOwnedFile(msg, result.File))
		case result.ChatSubRequest != nil:
			return bot.send(ctx, bot.renderSubRequest(msg, result.ChatSubRequest))
		default:
			log.Error(ctx, "bad result")
		}
	}

	answer := bot.newAnswerMsg(msg, bot.getTextStart())
	return bot.send(ctx, answer)
}

func (bot *Bot) onUnsupportedFileKind(ctx context.Context, msg *tgbotapi.Message) error {
	answer := bot.newReplyMsg(msg, textUnsupportedFileKind)
	return bot.send(ctx, answer)
}

func (bot *Bot) onVersion(ctx context.Context, msg *tgbotapi.Message) error {
	text := strings.Join([]string{
		fmt.Sprintf("**Version**: `%s`", tg.EscapeMD(bot.buildInfo.Version)),
		fmt.Sprintf("**Ref**: `%s`", tg.EscapeMD(bot.buildInfo.Ref)),
		fmt.Sprintf("**Time**: `%s`", tg.EscapeMD(bot.buildInfo.Time)),
	}, "\n")

	answer := bot.newReplyMsg(msg, text)

	return bot.send(ctx, answer)
}
